datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  PaymentMethod PaymentMethod[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Genres {
  id   Int    @id @default(autoincrement())
  tag  String @unique
  slug String @unique

  tracks Track[]
}

model Track {
  id          Int       @id @default(autoincrement())
  title       String
  createdAt   DateTime // 트랙 추가일
  imageUrl    String
  length      Int // 트랙 길이 (초)
  bpm         Int // 트랙 템포
  releaseDate DateTime? // 트랙 공개일
  isPublish   Boolean // 트랙 릴리즈 여부

  // 1 to Many
  creator   Creator? @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId Int?
  stems     Stem[] // 원곡을 이루는 개별트랙

  // Many to Many
  genres Genres[]
  moods  Mood[]
}

model Stem {
  id       Int    @id @default(autoincrement())
  stemType String // full, drum, bass, guitar 등등
  mp3Src   String // 오디오 소스 url

  // 1 to Many
  track   Track? @relation(fields: [trackId], references: [id], onDelete: SetNull)
  trackId Int?
}

model Mood {
  id  Int    @id @default(autoincrement())
  tag String @unique

  // Many to Many
  traks Track[]
}

model Creator {
  id           Int    @id @default(autoincrement())
  creativeType String
  name         String
  imageUrl     String

  // 1 to Many
  tracks Track[]
}

// 결제 관련

enum PaymentType {
  KAKAOPAY
}

model PaymentMethod {
  id      String      @id @default(cuid())
  type    PaymentType
  details Json // ex. 각 간편결제 서비스에 맞도록 {tid: string, sid: string}

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
